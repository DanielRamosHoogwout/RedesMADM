View(M)
G_ <- graph.adjacency(M,mode="directed")
G
G_
G <- graph_from_adjacency_matrix(M)
G
data <- read.table("../proyecto-entrega-Kernel/webPageLinks.txt")
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
K <- t(M) %*% M
tt <- M %*% t(M)
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
gamma <- 1/(min(MIdg,MOdg))
# K---------------------------------------------------------------------
Kgamma <- K %*% solve(diag(ncol(data)) - gamma*K)
Kgamma_results = data.frame()
for (i in 1:nrow(Kgamma)){
Kgamma_newsum=sum(Kgamma[i,])
Kgamma_results=rbind(Kgamma_results,Kgamma_newsum)
rm(Kgamma_newsum)
}
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.33333333333333)
View(Kgamma_results)
library(matlib)
# K---------------------------------------------------------------------
Kgamma <- K %*% inv(diag(ncol(data)) - gamma*K)
Kgamma_results = data.frame()
for (i in 1:nrow(Kgamma)){
Kgamma_newsum=sum(Kgamma[i,])
Kgamma_results=rbind(Kgamma_results,Kgamma_newsum)
rm(Kgamma_newsum)
}
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.33333333333333)
Kgamma_results
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.33333334)
View(Kgamma_results)
auth <- as.data.frame(authority.score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority.score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
View(auth_k)
data <- read.table("../proyecto-entrega-Kernel/webPageLinks.txt")
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
K <- t(M) %*% M
tt <- M %*% t(M)
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
gamma <- 1/(min(MIdg,MOdg))
# K---------------------------------------------------------------------
Kgamma <- K %*% inv(diag(ncol(data)) - gamma*K)
Kgamma_results = data.frame()
for (i in 1:nrow(Kgamma)){
Kgamma_newsum=sum(Kgamma[i,])
Kgamma_results=rbind(Kgamma_results,Kgamma_newsum)
rm(Kgamma_newsum)
}
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.33333334)
View(Kgamma_results)
?authority_score
auth <- as.data.frame(authority_score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority.score(G)$vector`)
auth <- auth %>% mutate(V=colnames(data), .before=`authority_score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
View(auth_k)
M
View(M)
gamma <- .07
# K---------------------------------------------------------------------
Kgamma <- K %*% inv(diag(ncol(data)) - gamma*K)
Kgamma_results = data.frame()
for (i in 1:nrow(Kgamma)){
Kgamma_newsum=sum(Kgamma[i,])
Kgamma_results=rbind(Kgamma_results,Kgamma_newsum)
rm(Kgamma_newsum)
}
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.33333334)
View(Kgamma_results)
auth <- as.data.frame(authority_score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority_score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
auth <- as.data.frame(authority_score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority_score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
Kgamma_results
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.33333334)
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.3255814)
View(Kgamma_results)
auth <- as.data.frame(authority_score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority_score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
View(auth_k)
data
data <- read.table("../proyecto-entrega-Kernel/webPageLinks.txt")
data
View(data)
str(data)
class(data)
M <- data.matrix(data)
View(M)
M <- t(M)
G <- graph_from_adjacency_matrix(M)
K <- t(M) %*% M
tt <- M %*% t(M)
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
gamma <- 1/(min(MIdg,MOdg))
gamma <- .07
# K---------------------------------------------------------------------
Kgamma <- K %*% inv(diag(ncol(data)) - gamma*K)
Kgamma_results = data.frame()
for (i in 1:nrow(Kgamma)){
Kgamma_newsum=sum(Kgamma[i,])
Kgamma_results=rbind(Kgamma_results,Kgamma_newsum)
rm(Kgamma_newsum)
}
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.3255814)
View(Kgamma_results)
auth <- as.data.frame(authority_score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority_score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
Kgamma_results
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X0)
View(Kgamma_results)
auth <- as.data.frame(authority_score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority_score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
View(auth_k)
data <- read.table("../proyecto-entrega-Kernel/webPageLinks.txt")
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
plot(G)
rowSums(K)
K <- t(M) %*% M
rowSums(K)
View(rowSums(K))
tt <- M %*% t(M)
degree(G,mode="in")
View(degree(G,mode="in"))
View(degree(G,mode="out"))
View(degree(G,mode="in"))
View(degree(G,mode=c("in")))
View(degree(G,mode=c("out")))
data <- read.table("../proyecto-entrega-Kernel/webPageLinks.txt")
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
K <- t(M) %*% M
tt <- M %*% t(M)
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
gamma <- 1/(min(MIdg,MOdg))
diag(ncol(data))
View(diag(ncol(data)))
Kgamma_results = data.frame()
for (i in 1:nrow(Kgamma)){
Kgamma_newsum=sum(Kgamma[i,])
Kgamma_results=rbind(Kgamma_results,Kgamma_newsum)
rm(Kgamma_newsum)
}
# K---------------------------------------------------------------------
Kgamma <- K %*% solve(diag(ncol(data)) - gamma*K)
Kgamma_results = data.frame()
for (i in 1:nrow(Kgamma)){
Kgamma_newsum=sum(Kgamma[i,])
Kgamma_results=rbind(Kgamma_results,Kgamma_newsum)
rm(Kgamma_newsum)
}
Kgamma
View(Kgamma)
Kgamma_results <- Kgamma_results %>%
mutate(V=colnames(data), .before=X2.33333333333333)
View(Kgamma_results)
auth <- as.data.frame(authority.score(G)$vector)
auth <- auth %>% mutate(V=colnames(data), .before=`authority.score(G)$vector`)
auth_k <- inner_join(Kgamma_results,auth)
View(auth_k)
View((degree(G,mode="in")))
View(degree(G))
View((degree(G,mode="out")))
View(auth_k)
View((degree(G,mode="in")))
library(igraph)
NK <- function(A, gamma) {
G <- graph_from_adjacency_matrix(A)
# Calculamos el máximo grado de difusión posible
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
max_gamma <- 1/(min(MIdg,MOdg))
# Comprobamos que gamma no es excesivamente elevado
if(gamma > max_gamma) {
return(paste("Grado de difusión demasiado alto. El valor debe estar entre 0 y",
round(max_gamma,3)))
}
K_ <- t(A) %*% A
T_ <- A %*% t(A)
output = list()
output$K_g <- K_ %*% solve(diag(nrow(A)) - gamma*K_)
output$T_g <- T_ %*% solve(diag(nrow(A)) - gamma*T_)
return(output)
}
results <- NK(data,0.07)
data <- as.matrix(read.table("webPageLinks.txt"))
data <- as.matrix(read.table("../proyecto-entrega-Kernel/webPageLinks.txt"))
results <- NK(data,0.07)
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
# En las filas d ela matriz están los que salen
# Vector inicial de hubs:
hub=rep(1,100)
M[1,] %*% hub
M %*% hub
M <- as.matrix(M)
Mt <- t(M)
Mt
auth=rep(1,100)
hub=rep(1,100)
Mt %*% hub
for (i in 1:100){#10 iteraciones
auth=Mt %*% hub
auth=auth/norm(auth,'2')
hub=M %*% auth
hub=hub/norm(hub,'2')
}
hub
View(auth)
auth %>% min_rank
library(tidyverse)
auth %>% min_rank
View(auth)
auth <- auth %>% min_rank
View(auth)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
NK <- function(A, gamma) {
G <- graph_from_adjacency_matrix(A)
# Calculamos el máximo grado de difusión posible
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
max_gamma <- 1/(min(MIdg,MOdg))
# Comprobamos que gamma no es excesivamente elevado
if(gamma > max_gamma) {
return(paste("Grado de difusión demasiado alto. El valor debe estar entre 0 y",
round(max_gamma,3)))
}
K_ <- t(A) %*% A
T_ <- A %*% t(A)
output = list()
output$K_g <- K_ %*% solve(diag(nrow(A)) - gamma*K_)
output$T_g <- T_ %*% solve(diag(nrow(A)) - gamma*T_)
return(output)
}
data <- as.matrix(read.table("webPageLinks.txt"))
results <- NK(data,0.07)
results_5 <- NK(data,0.07)
results_4 <- as.data.frame(results_5$K_g) %>% rowSums() %>% as.data.frame() %>%
min_rank %>% as.data.frame()
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
auth_2 <- as.data.frame(authority.score(G)$vector) %>% min_rank %>% as.data.frame()
auth_k07_3 <- cbind(results_4,auth_2)
View(results_4)
# A mano lo hemos calculado con norma 2
norm(authority_score(G)$vector,"2")
1.427393*t(A)
1.427393*t(M)
View(1.427393*t(M))
I = diag(2)
I
solve(I)
data <- read.table("../proyecto-entrega-Kernel/webPageLinks.txt")
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
K <- t(M) %*% M
zap <- 1:100
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
gamma <- 1/(min(MIdg,MOdg))
Kgamma=vector()
for(i in zap){
Kgamma <- (gamma^i)*(t(K) %*% K)^(i+1)
}
Kgamma
View(Kgamma)
str(Kgamma)
Kgamma[i] <- (gamma^i)*(t(K) %*% K)^(i+1)
for(i in zap){
Kgamma[i] <- (gamma^i)*(t(K) %*% K)^(i+1)
}
zap <- 1:100
Kgamma=vector()
for(i in zap){
Kgamma[i] <- (gamma^i-1)*(t(K) %*% K)^(i)
}
Kgamma=list()
for(i in zap){
Kgamma <- (gamma^i)*(t(K) %*% K)^(i+1)
}
Kgamma
View(Kgamma)
Kgamma <- sum((gamma^i)*(t(K) %*% K)^(i+1))
for(i in zap){
Kgamma <- sum((gamma^i)*(t(K) %*% K)^(i+1))
}
Kgamma
View(Kgamma)
Kgamma=vector()
for(i in zap){
Kgamma <- sum((gamma^i)*(t(K) %*% K)^(i+1))
}
View(Kgamma)
zap <- 0:10
Kgamma=vector()
for(i in zap){
Kgamma <- sum((gamma^i)*(t(K) %*% K)^(i+1))
}
View(Kgamma)
K2 <- K + gamma*K^2
View(K2)
K3 <- K2 + (gamma^2)*(K^3)
View(K3)
View (K2)
data <- read.table("../proyecto-entrega-Kernel/webPageLinks.txt")
M <- data.matrix(data)
G <- graph_from_adjacency_matrix(M)
K <- t(M) %*% M
tt <- M %*% t(M)
MIdg <- max(degree(G,mode="in"))
MOdg <- max(degree(G,mode="out"))
gamma <- 1/(min(MIdg,MOdg))
ncol(data)
I(100)
gamma*K
View(gamma*K)
solve(diag(ncol(data)) - gamma*K)
View(solve(diag(ncol(data)) - gamma*K))
# K---------------------------------------------------------------------
Kgamma <- K %*% solve(diag(ncol(data)) - gamma %*% K)
inversa <- solve(diag(ncol(data)) - gamma*K)
Kgamma <- K %*% inversa
View(Kgamma)
Kgamma <- Kgamma %>% rowSums
Kgamma
View(Kgamma)
K/inversa
(diag(ncol(data)) - gamma*K)^1
ysisolve <- (diag(ncol(data)) - gamma*K)
Vew(Ysisolve)
View(ysisolve)
K %*% ysisolve
View(K%*%ysisolve)
View(K)
K+K
View(K+K)
##Principal Components
rm(list = ls())
USArrests
states=row.names(USArrests)
states
names(USArrests)
apply(USArrests, 2, mean)
apply(USArrests, 2, var)
pr.out=prcomp(USArrests, scale=TRUE)
names(pr.out)
pr.out$center # vector de medias
pr.out$scale # desv. estandar/car para estandarizar
pr.out$rotation # cargas de cada variable
dim(pr.out$x) # x es el vector de proyecciones
pr.out$x
biplot(pr.out, scale=0)
pr.out$rotation=-pr.out$rotation # se cambia el sentido de la rotación
pr.out$x=-pr.out$x
biplot(pr.out, scale=0)
pr.out$sdev
pr.var=pr.out$sdev^2
pr.var
pve=pr.var/sum(pr.var)
pve
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained", ylim=c(0,1),type='b')
PCbiplot(fit, colors=c("black", "black", "red", "yellow"))
library(ggplot2)
biplot(pr.out, expand=10, xlim=c(-0.30, 0.0), ylim=c(-0.1, 0.1))
PCbiplot <- function(PC, x="PC1", y="PC2", colors=c('black', 'black', 'red', 'red')) {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames), color=colors[1])
plot <- plot + geom_hline(yintercept = 0,aes(0), size=.2) + geom_vline(aes(0), size=.2, color=colors[2], xintercept = 0)
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color=colors[3])
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color=colors[4])
plot
}
fit <- prcomp(USArrests, scale=T)
PCbiplot(fit, colors=c("black", "black", "red", "yellow"))
install.packages("matrixcalc")
library(matrixcalc)
?matrix.power
load("../../Exercicis/cslogs100.rda")
cslogs100 -> D
D
D[4]
D[5]
install.packages("prettydoc")
library(igraph)
links=read.table("data/facebook_sample_anon.txt", header=FALSE, as.is=T)
facenet=graph_from_data_frame(d=links, directed=FALSE)
links
facenet
# Grafo vacío
g_vacio <- graph.empty(n = 10, directed = TRUE)
g_vacio
plot(g_vacio)
# Grafo completo
g_complete <- graph.full(n = 10, directed = FALSE, loops = FALSE)
plot(g_complete)
# Estrellas
g_star_out <- graph.star(n = 10, mode = "out")
plot(g_star_out)
g_star_in <- graph.star(n = 10, mode = "in")
plot(g_star_in)
# Anillos
g_ring <- graph.ring(n = 10)
plot(g_ring)
# Un grafo a partir de una lista de aristas
edges <- c(1,2, 3,2, 2,4)
g_from_edges <- graph(edges, n = max(edges), directed = TRUE)
plot(g_from_edges)
# Recuento de vértices
vcount(g_from_edges)
# Recuento de aristas
ecount(g_from_edges)
# Vecinos del nodo 1 de un grafo
neighbors(g_from_edges, V(g_from_edges)[1], mode = 1)
plot(g_from_edges)
# Número de los vecinos del nodo 2 del grafo
neighbors(g, V(g)[2], mode = 1)
g <- graph(edges, n = max(edges), directed = TRUE)
plot(g)
# Número de los vecinos del nodo 2 del grafo
neighbors(g, V(g)[2], mode = 1)
# Número de los vecinos del nodo 2 del grafo
neighbors(g, V(g)[4], mode = 1)
# Número de los vecinos del nodo 2 del grafo
neighbors(g, V(g)[3], mode = 1)
# Número de los vecinos del nodo 2 del grafo
neighbors(g, V(g)[2], mode = 1)
#
incident(g,V(g)[2], mode=c("all", "out", "in", "total"))
incident(g, V(g)[2], mode=c("total"))
incident(g, V(g)[2], mode=c("all"))
incident(g, V(g)[2], mode=c("out"))
# Booleano para saber si es un grafo completamente conectado
is.directed(g)
# Para determinar si dos nodos concretos están conectados
are.connected(g, V(g)[1], V(g)[3])
# Para obtener una lista de las aristas
get.edgelist(g)
# Para obtener la secuencia de vértices
V(g)
# Para obtener la secuencia de aristas
E(g, P=NULL, path=NULL, directed=T)
# Añadir un vértice
add.vertices(g, 1, attr = list())
plot(g)
# Añadir un vértice
add.vertices(g, 5, attr = list())
plot(g)
library(tidyverse)
# Añadir un vértice
g %>% add.vertices(1, attr = list())
plot(g)
# Añadir un vértice
h <- g %>% add_vertices(1, attr = list()) %>% add_edges(c(4,5))
h
plot(h)
plot(g)
plot(h)
# Guardar el grafo en pdf
pdf("h.pdf")
links
# Importación de grafos
i <- read.graph("data/facebook_sample_anon.txt", format="edgelist")
plot(i)
links=read.table("facebook_sample_anon.txt", header=FALSE, as.is=T)
links=read.table("data/facebook_sample_anon.txt", header=FALSE, as.is=T)
links=read.table("facebook_sample_anon.txt", header=FALSE, as.is=T)
facenet=graph_from_data_frame(d=links, directed=FALSE)
links=read.table("../proyecto-entrega-1/data/facebook_sample_anon.txt", header=FALSE, as.is=T)
facenet=graph_from_data_frame(d=links, directed=FALSE)
library(igraph)
facenet=graph_from_data_frame(d=links, directed=FALSE)
ngf <- sample_pa(1000, out.seq=degree(facenet,mode="out"))
ngf <- sample_pa(Vcount(facenet), out.seq=degree(facenet,mode="out"))
ngf <- sample_pa(vcount(facenet), out.seq=degree(facenet,mode="out"))
ngf
plot(sort(degree(ngf), decreasing = TRUE), log = "xy")
